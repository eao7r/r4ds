else  {  dbWriteTable(con, 'gbag_bldg1', value = bldg_1, append=TRUE, row.names = FALSE)}
bldg_2             <- data.frame(game_id, r, city_names[city], buildings[city, 1, rr], buildings[city, 2, rr],
buildings[city, 3, rr], buildings[city, 4, rr],
buildings[city, 1, rr-2], buildings[city, 2, rr-2],
buildings[city, 3, rr-2], buildings[city, 4, rr-2],
round(coal_use_game[city, "Buildings", rr ]), round(coal_use_base[city, "Buildings", rr ]))
colnames(bldg_2)  <- c("game_id", "round", "city_name", "b_mfg_end", "b_off_end", "b_res_end", "b_other_end",
"b_mfg_begin", "b_off_begin", "b_res_begin", "b_other_begin",
"bldg_coal_game", "bldg_coal_base")
if (first_output) {  bldg_2$idx <- 1:nrow(bldg_2)
dbWriteTable(con, 'gbag_bldg2', value = bldg_2, overwrite=TRUE, row.names = FALSE)}
# dbSendQuery(con, "ALTER TABLE gbag_bldg2 ADD COLUMN idx SERIAL PRIMARY KEY" )  }
else  {  dbWriteTable(con, 'gbag_bldg2', value = bldg_2, append=TRUE, row.names = FALSE)}
bldg_3             <- data.frame(game_id, r, city_names[city],
round((pollutants_monthly_game["NO2",city,end_months[rr]]-pollutants_monthly_game["NO2",city,end_months[rr-2]+1])*pollutant_dist["NO2","Buildings",city,rr],4),
round((pollutants_monthly_game["PM10",city,end_months[rr]]-pollutants_monthly_game["PM10",city,end_months[rr-2]+1])*pollutant_dist["PM10","Buildings",city,rr],4),
round((pollutants_monthly_game["PM25",city,end_months[rr]]-pollutants_monthly_game["PM25",city,end_months[rr-2]+1])*pollutant_dist["PM25","Buildings",city,rr],4),
round((pollutants_monthly_game["CO",city,end_months[rr]]-pollutants_monthly_game["CO",city,end_months[rr-2]+1])*pollutant_dist["CO","Buildings",city,rr],4),
round((pollutants_monthly_game["SO2",city,end_months[rr]]-pollutants_monthly_game["SO2",city,end_months[rr-2]+1])*pollutant_dist["SO2","Buildings",city,rr],4))
colnames(bldg_3)   <- c("game_id", "round", "city_name", "bldg_no2_change", "bldg_pm10_change", "bldg_pm25_change", "bldg_co_change", "bldg_so2_change")
if (first_output) {  bldg_3$idx <- 1:nrow(bldg_3)
dbWriteTable(con, 'gbag_bldg3', value = bldg_3, overwrite=TRUE, row.names = FALSE)}
# dbSendQuery(con, "ALTER TABLE gbag_bldg3 ADD COLUMN idx SERIAL PRIMARY KEY" )  }
else  {  dbWriteTable(con, 'gbag_bldg3', value = bldg_3, append=TRUE, row.names = FALSE)}
##  WRITE CITY's INDUSTRY OUTPUT
ind_1            <- data.frame(game_id, r, city_names[city], player_policies[r, city, "industry_policy"],
i_costs[r, 1, city], i_costs[r, 2, city], i_costs[r, 3, city], i_costs[r, 4, city])
colnames(ind_1)  <- c("game_id", "round", "city_name", "ind_policy", "ind_trans_costs", "ind_direct_costs", "ind_direct_bens", "ind_indirect_bens")
if (first_output == TRUE) { ind_1$idx <- 1:nrow(ind_1)
dbWriteTable(con, 'gbag_ind1', value = ind_1, overwrite=TRUE, row.names = FALSE)}
# dbSendQuery(con, "ALTER TABLE gbag_ind1 ADD COLUMN idx SERIAL PRIMARY KEY" )  }
else  {  dbWriteTable(con, 'gbag_ind1', value = ind_1, append=TRUE, row.names = FALSE)}
ind_2             <- data.frame(game_id, r, city_names[city], industry[city, 1, rr], industry[city, 2, rr],
industry[city, 3, rr], industry[city, 4, rr],
industry[city, 1, rr-2], industry[city, 2, rr-2],
industry[city, 3, rr-2], industry[city, 4, rr-2],
round(coal_use_game[city, "Industry", rr]), round(coal_use_base[city, "Industry", rr]))
colnames(ind_2)  <- c("game_id", "round", "city_name", "i_mfg_end", "i_cement_end", "i_steel_end", "i_other_end",
"i_mfg_begin", "i_cement_begin", "i_steel_begin", "i_other_begin",
"ind_coal_game", "ind_coal_base")
if (first_output) {  ind_2$idx <- 1:nrow(ind_2)
dbWriteTable(con, 'gbag_ind2', value = ind_2, overwrite=TRUE, row.names = FALSE)}
# dbSendQuery(con, "ALTER TABLE gbag_ind2 ADD COLUMN idx SERIAL PRIMARY KEY" )  }
else  {  dbWriteTable(con, 'gbag_ind2', value = ind_2, append=TRUE, row.names = FALSE)}
ind_3             <- data.frame(game_id, r, city_names[city],
round((pollutants_monthly_game["NO2",city,end_months[rr]]-pollutants_monthly_game["NO2",city,end_months[rr-2]+1])*pollutant_dist["NO2","Industry",city,rr],4),
round((pollutants_monthly_game["PM10",city,end_months[rr]]-pollutants_monthly_game["PM10",city,end_months[rr-2]+1])*pollutant_dist["PM10","Industry",city,rr],4),
round((pollutants_monthly_game["PM25",city,end_months[rr]]-pollutants_monthly_game["PM25",city,end_months[rr-2]+1])*pollutant_dist["PM25","Industry",city,rr],4),
round((pollutants_monthly_game["CO",city,end_months[rr]]-pollutants_monthly_game["CO",city,end_months[rr-2]+1])*pollutant_dist["CO","Industry",city,rr],4),
round((pollutants_monthly_game["SO2",city,end_months[rr]]-pollutants_monthly_game["SO2",city,end_months[rr-2]+1])*pollutant_dist["SO2","Industry",city,rr],4))
colnames(ind_3)   <- c("game_id", "round", "city_name", "ind_no2_change", "ind_pm10_change", "ind_pm25_change", "ind_co_change", "ind_so2_change")
if (first_output) {  ind_3$idx <- 1:nrow(ind_3)
dbWriteTable(con, 'gbag_ind3', value = ind_3, overwrite=TRUE, row.names = FALSE)}
# dbSendQuery(con, "ALTER TABLE gbag_ind3 ADD COLUMN idx SERIAL PRIMARY KEY" )  }
else  {  dbWriteTable(con, 'gbag_ind3', value = ind_3, append=TRUE, row.names = FALSE)}
##  WRITE CITY's POWER GENERATION OUTPUT
pg_1            <- data.frame(game_id, r, city_names[city], player_policies[r, city, "power_policy"],
player_policies[r, city, "sub_p"], player_policies[r, city, "natgas_p"],
player_policies[r, city, "renew_p"], player_policies[r, city, "nuclear_p"],
pg_costs[r, 1, city], pg_costs[r, 2, city], pg_costs[r, 3, city], pg_costs[r, 4, city])
colnames(pg_1)  <- c("game_id", "round", "city_name", "power_policy", "sub_p", "natgas_p", "renew_p", "nuclear_p", "power_trans_costs",
"power_direct_costs", "power_direct_bens", "power_indirect_bens")
if (first_output) {  pg_1$idx <- 1:nrow(pg_1)
dbWriteTable(con, 'gbag_pg1', value = pg_1, overwrite=TRUE, row.names = FALSE)}
# dbSendQuery(con, "ALTER TABLE gbag_pg1 ADD COLUMN idx SERIAL PRIMARY KEY" )  }
else  {  dbWriteTable(con, 'gbag_pg1', value = pg_1, append=TRUE, row.names = FALSE)}
pg_2             <- data.frame(game_id, r, city_names[city], power[rr, 1, city], power[rr, 2, city], power[rr, 3, city],
power[rr, 4, city], power[rr, 5, city], power[rr-2, 1, city], power[rr-2, 2, city],
power[rr-2, 3, city], power[rr-2, 4, city], power[rr-2, 5, city],
round(coal_use_game[city, "Power",rr]), round(coal_use_game[city, "Power", rr-1]))
colnames(pg_2)  <- c("game_id", "round", "city_name", "sub_end", "super_end", "natgas_end","renew_end", "nuc_end",
"sub_begin", "super_begin", "natgas_begin", "renew_begin", "nuc_begin",
"pg_coal_game", "pg_coal_base")
if (first_output) {  pg_2$idx <- 1:nrow(pg_2)
dbWriteTable(con, 'gbag_pg2', value = pg_2, overwrite=TRUE, row.names = FALSE)}
# dbSendQuery(con, "ALTER TABLE gbag_pg2 ADD COLUMN idx SERIAL PRIMARY KEY" )  }
else  {  dbWriteTable(con, 'gbag_pg2', value = pg_2, append=TRUE, row.names = FALSE) }
pg_3             <- data.frame(game_id, r, city_names[city],
round((pollutants_monthly_game["NO2",city,end_months[rr]]-pollutants_monthly_game["NO2",city,end_months[rr-2]+1])*pollutant_dist["NO2","Power",city,rr],4),
round((pollutants_monthly_game["PM10",city,end_months[rr]]-pollutants_monthly_game["PM10",city,end_months[rr-2]+1])*pollutant_dist["PM10","Power",city,rr],4),
round((pollutants_monthly_game["PM25",city,end_months[rr]]-pollutants_monthly_game["PM25",city,end_months[rr-2]+1])*pollutant_dist["PM25","Power",city,rr],4),
round((pollutants_monthly_game["CO",city,end_months[rr]]-pollutants_monthly_game["CO",city,end_months[rr-2]+1])*pollutant_dist["CO","Power",city,rr],4),
round((pollutants_monthly_game["SO2",city,end_months[rr]]-pollutants_monthly_game["SO2",city,end_months[rr-2]+1])*pollutant_dist["SO2","Power",city,rr],4))
colnames(pg_3)   <- c("game_id", "round", "city_name", "pg_no2_change", "pg_pm10_change", "pg_pm25_change", "pg_co_change", "pg_so2_change")
if (first_output) {  pg_3$idx <- 1:nrow(pg_3)
dbWriteTable(con, 'gbag_pg3', value = pg_3, overwrite=TRUE, row.names = FALSE)}
# dbSendQuery(con, "ALTER TABLE gbag_pg3 ADD COLUMN idx SERIAL PRIMARY KEY" )  }
else  {  dbWriteTable(con, 'gbag_pg3', value = pg_3, append=TRUE, row.names = FALSE)}
##  WRITE CITY's Maritime OUTPUT
mar_1            <- data.frame(game_id, r, city_names[city], player_policies[r, city, "maritime_policy"],
m_costs[r, 1, city], m_costs[r, 2, city], m_costs[r, 3, city], m_costs[r, 4, city])
colnames(mar_1)  <- c("game_id", "round", "city_name", "maritime_policy", "maritime_trans_costs", "maritime_direct_costs", "maritime_direct_bens", "maritime_indirect_bens")
if (first_output) {  mar_1$idx <- 1:nrow(mar_1)
dbWriteTable(con, 'gbag_mar1', value = mar_1, overwrite=TRUE, row.names = FALSE)}
# dbSendQuery(con, "ALTER TABLE gbag_mar1 ADD COLUMN idx SERIAL PRIMARY KEY" )  }
else  {  dbWriteTable(con, 'gbag_mar1', value = mar_1, append=TRUE, row.names = FALSE)}
mar_2             <- data.frame(game_id, r, city_names[city], maritime[rr, 1, city], maritime[rr, 2, city], maritime[rr, 3, city],
maritime[rr-2, 1, city], maritime[rr-2, 2, city], maritime[rr-2, 3, city])
colnames(mar_2)  <- c("game_id", "round", "city_name", "og_end", "coastal_end", "river_end" , "og_begin", "coastal_begin", "river_begin")
if (first_output) {  mar_2$idx <- 1:nrow(mar_2)
dbWriteTable(con, 'gbag_mar2', value = mar_2, overwrite=TRUE, row.names = FALSE)}
# dbSendQuery(con, "ALTER TABLE gbag_mar2 ADD COLUMN idx SERIAL PRIMARY KEY" )  }
else  {  dbWriteTable(con, 'gbag_mar2', value = mar_2, append=TRUE, row.names = FALSE)}
mar_3             <- data.frame(game_id, r, city_names[city],
round((pollutants_monthly_game["NO2",city,end_months[rr]]-pollutants_monthly_game["NO2",city,end_months[rr-2]+1])*pollutant_dist["NO2","Maritime",city,rr],4),
round((pollutants_monthly_game["PM10",city,end_months[rr]]-pollutants_monthly_game["PM10",city,end_months[rr-2]+1])*pollutant_dist["PM10","Maritime",city,rr],4),
round((pollutants_monthly_game["PM25",city,end_months[rr]]-pollutants_monthly_game["PM25",city,end_months[rr-2]+1])*pollutant_dist["PM25","Maritime",city,rr],4),
round((pollutants_monthly_game["CO",city,end_months[rr]]-pollutants_monthly_game["CO",city,end_months[rr-2]+1])*pollutant_dist["CO","Maritime",city,rr],4),
round((pollutants_monthly_game["SO2",city,end_months[rr]]-pollutants_monthly_game["SO2",city,end_months[rr-2]+1])*pollutant_dist["SO2","Maritime",city,rr],4))
colnames(mar_3)   <- c("game_id", "round", "city_name", "mar_no2_change", "mar_pm10_change", "mar_pm25_change", "mar_co_change", "mar_so2_change")
if (first_output) {  mar_3$idx <- 1:nrow(mar_3)
dbWriteTable(con, 'gbag_mar3', value = mar_3, overwrite=TRUE, row.names = FALSE)}
# dbSendQuery(con, "ALTER TABLE gbag_mar3 ADD COLUMN idx SERIAL PRIMARY KEY" )  }
else  {  dbWriteTable(con, 'gbag_mar3', value = mar_3, append=TRUE, row.names = FALSE)}
first_output <- FALSE
} # End of city loop
}  # End of gameOutput function
Play_The_Game(100,T,T,7)
library()
install.packages("tidyverse")
install.packages(c("nycflights13", "gapminder", "Lahman"))
help
help("read.csv")
library(tidyverse)
install.packages('broom')
library(tidyverse)
update.packages(ask = FALSE)
library(tidyverse)
-2/4.8
pnorm(0.233)
pnorm(-0.4166667)
1-pnorm(-0.4166667)
-2/1.6
1-pnorm(-1.25)
1-pnorm(-2/(4.8/sqrt(3)))
1-pnorm(0.4166667)
1-pnorm(2/(4.8/sqrt(3)))
2/(4.8/sqrt(3))
1-pnorm(0.4166667)
qt(0.97,49)
qt(0.97,48)
qt(0.93,81)
qt(0.87,149)
pt()
qt(0.985,99)
qt(0.985,99)*0.07
qt(0.985,99)*0.02
qt(0.985,99)*0.02+3.2
pt(2.14,49)
1-pt(2.14,49)
(1-pt(2.14,49))*2
(1-pt(0.78,315))
Pt(-0.78,33)
Pt(-0.78,33)
pt(-0.78,33)
pt(0.78,33)
pt(1.57,33)
5/sqrt(50)
-2/(5/sqrt(50))
pt(-2/(5/sqrt(50)),49)
pt(-1.6/(5/sqrt(50)),49)
qt(0.05,49)
qt(0.01,49)
qt(0.99,49)
qt(0.9754)
qt(0.9754,84)
9/sqrt(85)
1.9958*0.9762
20+1.9958*0.9762
20-1.9958*0.9762
qt(0.95,84)
qt(0.9754,84)
qt(0.9754,85)
qt(0.9754,83)
qt(0.9754,84)
qt(0.99,84)
qt(0.9,84)
qt(0.95,84)
qt(0.975,84)
1.9886*0.9762
20-1.9886*0.9762
20+1.9886*0.9762
1.9886*3/sqrt(85)
20-1.9886*3/sqrt(85)
20+1.9886*3/sqrt(85)
-1/(3/sqrt(85))
pt(-3.0732,84)
install.packages("tidyverse")
remove.packages("nycflights13", lib="~/R/win-library/3.6")
install.packages("nycflights13")
setwd("C:/Users/eaort/Desktop/repos/r4ds")
Data<-read.csv("ClassDataPrevious.csv", header=TRUE)
Data[1,2] ##row index first, then column index
View(Data)
Data[c(1,3,4),c(1,5,8)]
##view specific column(s)
Data$Year ##or
Data[,1] ##or
Data[,-c(2:8)]
##view specific row(s)
Data[c(1,3),]
Data[10:20,]
Data[10:20,]
which(Data$Sport=="Soccer")
Data[which(Data$Sport=="Soccer"),]
Data[which(Data$Sport=="Soccer"),]
SoccerPeeps<-Data[which(Data$Sport=="Soccer"),]
View(Data)
View(SoccerPeeps)
dim(SoccerPeeps)
SoccerPeeps_2nd<-Data[which(Data$Sport=="Soccer" & Data$Year=="Second"),]
dim(SoccerPeeps_2nd)
Sleepy<-Data[which(Data$Sleep>8),]
View(Sleepy)
Sleepy_or_Soccer<-Data[which(Data$Sport=="Soccer" | Data$Sleep>8),]
#############################
##change names of column(s)##
#############################
names(Data)[7]<-"Comp"
#############################
##change names of column(s)##
#############################
names(Data)[7]<-"Computer"
Data["Year"]
#############################
##change names of column(s)##
#############################
names(Data)["Computer"]<-"Comp"
#############################
##change names of column(s)##
#############################
names(Data)["Computer"]<-"Comp"
#############################
##change names of column(s)##
#############################
names(Data)[7]<-"Comp"
names(Data)[c(1,7)]<-c("Yr","Computer")
##find which rows have missing data
is.na(Data)
install.packages("editData")
editData:::editData()
editData:::editData()
View(Sleepy)
editData:::editData()
View(Sleepy)
editData:::editData()
View(Sleepy)
editData:::editData()
View(Sleepy)
View(Sleepy)
editData:::editData()
remove.packages("editData", lib="~/R/win-library/3.6")
Data[!complete.cases(Data),]
View(Data)
Data[1,8]=""
Data[!complete.cases(Data),]
Data[1,8]=NA
Data[!complete.cases(Data),]
Data[1,8]=4
Data[!complete.cases(Data),]
##remove observations with missing values. CAUTION!
Data_nomiss<-na.omit(Data) ##or
View(Data_nomiss)
Data_nomiss2<-Data[complete.cases(Data),]
##find means of numeric columns
apply(Data[,c(2,4,6,8)],2,mean)
apply(Data[,c(2,4,6,8)],2,mean,na.rm=T)
##find means of numeric columns
apply(Data[,c(2,4,6,8)],2,mean)
apply(Data[,c(2,4,6,8)],2,mean,na.rm=T)
Data<-read.csv("ClassDataPrevious.csv", header=TRUE)
apply(Data[,c(2,4,6,8)],2,mean,na.rm=T)
##means are suspiciously high, perhaps due to data entry errors
##find medians instead
apply(Data[,c(2,4,6,8)],2,median,na.rm=T)
apply(Data[,c(2,4,6,8)],2,mean,na.rm=T)
##means are suspiciously high, perhaps due to data entry errors
##find medians instead
apply(Data[,c(2,4,6,8)],2,median,na.rm=T)
##find median sleep by Yr
tapply(Data$Sleep,Data$Yr,median,na.rm=T)
##find median sleep by Yr
tapply(Data$Sleep,Data$Yr,median,na.rm=T)
Data<-read.csv("ClassDataPrevious.csv", header=TRUE)
##find means of numeric columns
apply(Data[,c(2,4,6,8)],2,mean)
apply(Data[,c(2,4,6,8)],2,mean,na.rm=T)
##means are suspiciously high, perhaps due to data entry errors
##find medians instead
apply(Data[,c(2,4,6,8)],2,median,na.rm=T)
##find median sleep by Yr
tapply(Data$Sleep,Data$Yr,median,na.rm=T)
names(Data)[c(1,7)]<-c("Yr","Computer")
##find means of numeric columns
apply(Data[,c(2,4,6,8)],2,mean)
apply(Data[,c(2,4,6,8)],2,mean,na.rm=T)
##means are suspiciously high, perhaps due to data entry errors
##find medians instead
apply(Data[,c(2,4,6,8)],2,median,na.rm=T)
##find median sleep by Yr
tapply(Data$Sleep,Data$Yr,median,na.rm=T)
str(Data)
class(Data$Yr)
summary(Data)
table(Data$Yr)
barplot(table(Data$Yr))
##find median sleep by Yr
tapply(Data$Sleep,Data$Yr,median,na.rm=T)
##change the ordering of the factor Yr that is more pleasing
Data$Yr<-factor(Data$Yr, levels=c("First","Second","Third","Fourth"))
levels(Data$Yr)
tapply(Data$Sleep,Data$Yr,median,na.rm=T) ##much nicer
##find median sleep by Yr and Computer
tapply(Data$Sleep,list(Data$Yr,Data$Computer),median,na.rm=T)
##find median sleep by Yr and Computer
tapply(Data$Sleep,list(Data$Yr,Data$Computer),median,na.rm=T)
View(Data)
##find median sleep by Yr and Computer
tapply(Data$Sleep,list(Data$Yr,Data$Computer, Data$Sport),median,na.rm=T)
##convert Sleep to minutes
Sleep_mins<-Data$Sleep * 60
view(Sleep_mins)
View(Data)
View(Sleep_mins)
##create sleep deprived variable: yes if sleep less than 7 hours,
##no otherwise
deprived<-ifelse(Data$Sleep<7, "yes", "no")
##create courseload category: light if 3 courses or less,
##regular if 4 or 5 courses, heavy if more than 5 courses
CourseLoad<-cut(Data$Courses, breaks = c(-Inf, 3, 5, Inf), labels = c("light", "regular", "heavy"))
##collapse classes of Yr: 1st and 2nd years to under,
##3rd and 4th years to upper
levels(Data$Yr)
new.levels<-c("und", "und", "up","up")
Year2<-factor(new.levels[Data$Yr])
Data<-read.csv("ClassDataPrevious.csv", header=TRUE)
#########################################
##view specific row(s) and/or column(s)##
#########################################
Data[1,2] ##row index first, then column index
Data[c(1,3,4),c(1,5,8)]
##view specific column(s)
Data$Year ##or
Data[,1] ##or
Data[,-c(2:8)]
##view specific row(s)
Data[c(1,3),]
Data[10:20,]
#######################################
##select observations by condition(s)##
#######################################
which(Data$Sport=="Soccer")
Data[which(Data$Sport=="Soccer"),]
SoccerPeeps<-Data[which(Data$Sport=="Soccer"),]
dim(SoccerPeeps)
SoccerPeeps_2nd<-Data[which(Data$Sport=="Soccer" & Data$Year=="Second"),]
dim(SoccerPeeps_2nd)
Sleepy<-Data[which(Data$Sleep>8),]
Sleepy_or_Soccer<-Data[which(Data$Sport=="Soccer" | Data$Sleep>8),]
#############################
##change names of column(s)##
#############################
names(Data)[7]<-"Comp"
names(Data)[c(1,7)]<-c("Yr","Computer")
################
##missing data##
################
##find which rows have missing data
is.na(Data)
Data[!complete.cases(Data),]
##remove observations with missing values. CAUTION!
Data_nomiss<-na.omit(Data) ##or
Data_nomiss2<-Data[complete.cases(Data),]
########################
##Summarize a variable##
########################
##find means of numeric columns
apply(Data[,c(2,4,6,8)],2,mean)
apply(Data[,c(2,4,6,8)],2,mean,na.rm=T)
##means are suspiciously high, perhaps due to data entry errors
##find medians instead
apply(Data[,c(2,4,6,8)],2,median,na.rm=T)
###################################
##Summarize a variable, by groups##
###################################
##find median sleep by Yr
tapply(Data$Sleep,Data$Yr,median,na.rm=T)
##change the ordering of the factor Yr that is more pleasing
Data$Yr<-factor(Data$Yr, levels=c("First","Second","Third","Fourth"))
levels(Data$Yr)
tapply(Data$Sleep,Data$Yr,median,na.rm=T) ##much nicer
##find median sleep by Yr and Computer
tapply(Data$Sleep,list(Data$Yr,Data$Computer),median,na.rm=T)
#######################################################
##Create a new variable based on existing variable(s)##
#######################################################
##convert Sleep to minutes
Sleep_mins<-Data$Sleep * 60
##create sleep deprived variable: yes if sleep less than 7 hours,
##no otherwise
deprived<-ifelse(Data$Sleep<7, "yes", "no")
##create courseload category: light if 3 courses or less,
##regular if 4 or 5 courses, heavy if more than 5 courses
CourseLoad<-cut(Data$Courses, breaks = c(-Inf, 3, 5, Inf), labels = c("light", "regular", "heavy"))
##collapse classes of Yr: 1st and 2nd years to under,
##3rd and 4th years to upper
levels(Data$Yr)
new.levels<-c("und", "und", "up","up")
Year2<-factor(new.levels[Data$Yr])
##add newly created variables as new columns to Data
Data<-data.frame(Data,Sleep_mins,deprived,CourseLoad,Year2)
head(Data)
Data2<-cbind(Data,Sleep_mins,deprived,CourseLoad,Year2)
dat1<-Data[1:3,1:3]
dat3<-Data[6:8,1:3]
res.dat2<-rbind(dat1,dat3)
write.csv(Data, file="newdata.csv", row.names = TRUE)
##sort in ascending order by Age
Data_by_age<-Data[order(Data$Age),]
##sort in descending order by Age
Data_by_age_des<-Data[order(-Data$Age),]
##sort in ascending order by Age and then Sleep
Data_by_age_sleep<-Data[order(Data$Age, Data$Sleep),]
View(Data_by_age_sleep)
##library(dplyr) or
library(tidyverse)
Data<-read.csv("ClassDataPrevious.csv", header=TRUE)
##view specific column(s)
select(Data,Year)
Data%>%
select(Year)
Data%>%
select(Year)
Data%>%
select(Year)
Data%>%
select(Year,Sleep)
##select multiple columns
Data%>%
select(Year,Sleep)
filter(Data, Sport=="Soccer")
SoccerPeeps<-Data%>%
filter(Sport=="Soccer")
SoccerPeeps_2nd<-Data%>%
filter(Sport=="Soccer" & Year=="Second")
Sleepy<-Data%>%
filter(Sleep>8)
Sleepy_or_Soccer<-Data%>%
filter(Sport=="Soccer" | Sleep>8)
Data<-Data%>%
rename(Yr=Year, Comp=Computer)
##find means of numeric columns
Data%>%
summarize(mean(Sleep,na.rm = T),mean(Courses),mean(Age),mean(Lunch,na.rm = T))
Data%>%
summarize(avgSleep=mean(Sleep,na.rm = T),avgCourse=mean(Courses),avgAge=mean(Age),avgLun=mean(Lunch,na.rm = T))
##means are suspiciously high, perhaps due to data entry errors
##find medians instead
Data%>%
summarize(medSleep=median(Sleep,na.rm = T),medCourse=median(Courses),medAge=median(Age),medLun=median(Lunch,na.rm = T))
Data%>%
group_by(Yr)%>%
summarize(medSleep=median(Sleep,na.rm=T))
testData<-Data%>%
group_by(Yr)%>%
summarize(medSleep=median(Sleep,na.rm=T))
class(testData)
##change the ordering of the factor Yr that is more pleasing
Data<- Data%>%
mutate(Yr = Yr%>%
fct_relevel(c("First","Second","Third","Fourth"))
)
View(Data)
Data%>%
group_by(Yr)%>%
summarize(medSleep=median(Sleep,na.rm=T))
##find median sleep by Yr and Computer
Data%>%
group_by(Yr,Comp)%>%
summarize(medSleep=median(Sleep,na.rm=T))
##convert Sleep to minutes and add new variable
Data<-Data%>%
mutate(Sleep_mins = Sleep*60)
##create sleep deprived variable: yes if sleep less than 7 hours,
##no otherwise
Data<-Data%>%
mutate(deprived=ifelse(Sleep<7, "yes", "no"))
##create courseload category: light if 3 courses or less,
##regular if 4 or 5 courses, heavy if more than 5 courses
Data<-Data%>%
mutate(CourseLoad=cut(Courses, breaks = c(-Inf, 3, 5, Inf), labels = c("light", "regular", "heavy")))
##collapse classes of Yr: 1st and 2nd years to under,
##3rd and 4th years to upper
Data<-Data%>%
mutate(UpUnder=fct_collapse(Yr,under=c("First","Second"),up=c("Third","Fourth")))
dat1<-Data[1:3,1:3]
dat3<-Data[6:8,1:3]
res.dat2<-bind_rows(dat1,dat3)
View(dat1)
write.csv(Data, file="newdata.csv", row.names = TRUE)
##sort in ascending order by Age
Data_by_age<-Data%>%
arrange(Age)
##sort in descending order by Age
Data_by_age_des<-Data%>%
arrange(desc(Age))
arrange(Age,desc(Sleep)
arrange(Age,desc(Sleep)
##sort in ascending order by Age and then Sleep
Data_by_age_sleep<-Data%>%
arrange(Age,desc(Sleep))
View(Data_by_age_sleep)
